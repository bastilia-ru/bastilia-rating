@using Bastilia.Rating.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Globalization

<QuickGrid Items="Members" Class="table table-striped" Virtualize="false">
    <TemplateColumn Context="member" Title="Имя" SortBy="@usernameSort">
        <BastiliaUserLink  Member="@member"/>
    </TemplateColumn>
    <TemplateColumn Context="member" Title="Статус" SortBy="GridSort<BastiliaMember>.ByAscending(x => x.CurrentStatus)">
        @if (member.IsPresident)
        {
            <span class="badge bg-warning text-dark">
                <i class="bi bi-award me-1"></i>Комендант до @member.PresidentUntil!.Value.ToString(CultureInfo.GetCultureInfo("ru-RU"))
            </span>
        }
        else
        {
            <CurrentStatusBadge Status="member.CurrentStatus" />
        }
    </TemplateColumn>
    <TemplateColumn Context="member" Title="Рейтинг" SortBy="ratingSort" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending">
        @if (member.ParticipateInRating)
        {
            @member.RatingValue
        }
        else
        {
            <Tooltip Title="Этот бастилец предпочитает не оценивать свой вклад бездушными цифрами">–</Tooltip>
        }
    </TemplateColumn>
    <TemplateColumn Context="member" Title="Исторический" SortBy="historicalRatingSort">
        @if (member.ParticipateInRating)
        {
            @member.HistoricalRatingValue
        }
        else
        {
            <Tooltip Title="Этот бастилец предпочитает не оценивать свой вклад бездушными цифрами">–</Tooltip>
        }
    </TemplateColumn>
</QuickGrid>

@code {
    [Parameter, EditorRequired]
    public IQueryable<BastiliaMember> Members { get; set; }

    GridSort<BastiliaMember> usernameSort = GridSort<BastiliaMember>
       .ByDescending(x => x.UserName);

    GridSort<BastiliaMember> ratingSort = GridSort<BastiliaMember>
        .ByDescending(x => x.ParticipateInRating)
        .ThenAscending(x => x.RatingValue)
        .ThenAscending(x => x.IsActiveMember)
        .ThenAscending(x => x.Achievements.Select(a => a.GrantedDate).DefaultIfEmpty(DateOnly.MinValue).Max());

    GridSort<BastiliaMember> historicalRatingSort = GridSort<BastiliaMember>
    .ByDescending(x => x.ParticipateInRating)
    .ThenAscending(x => x.HistoricalRatingValue)
    .ThenAscending(x => x.IsActiveMember)
    .ThenAscending(x => x.Achievements.Select(a => a.GrantedDate).DefaultIfEmpty(DateOnly.MinValue).Max());
}

